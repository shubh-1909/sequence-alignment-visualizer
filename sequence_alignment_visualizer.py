# -*- coding: utf-8 -*-
"""Sequence_Alignment_Visualizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RoMifTBK0Exm4sSEl9ZPf7zGZjdwEtMg

# üß¨ Sequence Alignment Visualizer

This mini-project performs **pairwise sequence alignment**:

- üß¨ Global alignment using Needleman-Wunsch
- üß¨ Local alignment using Smith-Waterman

We will:
- Upload two FASTA files
- Align them using BioPython
- Show aligned sequences and score

---
"""

!pip install biopython

from Bio import SeqIO, pairwise2
from Bio.pairwise2 import format_alignment
from google.colab import files

"""## üìÇ Upload Two FASTA Files
We‚Äôll read two DNA or protein sequences from uploaded `.fasta` files.

"""

# Upload both FASTA files
uploaded = files.upload()

# Read first two files
files_list = list(uploaded.keys())
record1 = SeqIO.read(files_list[0], "fasta")
record2 = SeqIO.read(files_list[1], "fasta")

print(f"‚úÖ Sequence 1: {record1.id}, Length: {len(record1.seq)}")
print(f"‚úÖ Sequence 2: {record2.id}, Length: {len(record2.seq)}")

# Upload both FASTA files
uploaded = files.upload()

# Read first two files
files_list = list(uploaded.keys())
record1 = SeqIO.read(files_list[0], "fasta")
record2 = SeqIO.read(files_list[1], "fasta")

print(f"‚úÖ Sequence 1: {record1.id}, Length: {len(record1.seq)}")
print(f"‚úÖ Sequence 2: {record2.id}, Length: {len(record2.seq)}")

"""## üåç Global Alignment (Needleman-Wunsch)

This tries to align **the full length of both sequences**, maximizing overall similarity.

"""

alignments = pairwise2.align.globalxx(record1.seq, record2.seq)
best_alignment = alignments[0]

print(format_alignment(*best_alignment))
print(f"Alignment Score: {best_alignment[2]}")

"""## üß¨ Local Alignment (Smith-Waterman)

This finds the **best matching local region** (subsequences).

"""

alignments_local = pairwise2.align.localxx(record1.seq, record2.seq)
best_local = alignments_local[0]

print(format_alignment(*best_local))
print(f"Local Alignment Score: {best_local[2]}")

"""## üìä Alignment Match Visualization

This plot shows a **visual representation of your sequence alignment**:

- ‚úÖ Green dots (`‚óè`) mark positions where the sequences match.
- ‚ùå Red `x` marks positions where they mismatch or there are gaps.

This helps you quickly spot conserved regions and overall alignment quality.

"""

import matplotlib.pyplot as plt

# Extract aligned sequences from best global alignment
aligned_seq1 = best_alignment[0]
aligned_seq2 = best_alignment[1]

# Create a simple match line
match_line = []
for a, b in zip(aligned_seq1, aligned_seq2):
    if a == b:
        match_line.append('|')
    else:
        match_line.append(' ')

# Plot as a simple alignment figure
fig, ax = plt.subplots(figsize=(len(aligned_seq1)//5, 4))

# Plot alignment matches
for i, char in enumerate(match_line):
    if char == '|':
        ax.plot(i, 1, 'go', markersize=4)  # green dot for match
    else:
        ax.plot(i, 1, 'rx', markersize=2)  # red x for mismatch

ax.set_yticks([])
ax.set_title("Alignment Match Visualization")
ax.set_xlabel("Position in Alignment")
plt.show()

"""## ‚úÖ Conclusion

This project demonstrated:
- Global alignment (Needleman-Wunsch)
- Local alignment (Smith-Waterman)
- Using BioPython's pairwise2 module



"""